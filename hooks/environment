#!/bin/bash

set -euo pipefail

echo "--- :googlecloud::key: Reading secrets from GCP Secret Manager"

initialized=""

function initialize() {
  if [[ "${initialized}" -eq "1" ]]; then
    return
  fi

  local result;
  local path;

  path=$(which gcloud)
  result=$?
  if [[ $result -ne 0 ]]; then
    echo "gcloud binary is not available in \$PATH"
    exit 1
  fi

  # shellcheck disable=SC2034
  path=$(which jq)
  result=$?
  if [[ $result -ne 0 ]]; then
    echo "jq binary is not available in \$PATH"
    exit 1
  fi

  if [ -v BUILDKITE_PLUGIN_GCP_SECRET_MANAGER_CREDENTIALS_FILE ]; then
    gcloud auth activate-service-account --key-file "${BUILDKITE_PLUGIN_GCP_SECRET_MANAGER_CREDENTIALS_FILE}"
  fi

  initialized="1"
}

function load_secret_into_env() {
  local export_name="$1"
  local secret_name="$2"
  local secret_value

  secret_value="$(get_secret_value "${secret_name}")"

  # Redact secrets (https://buildkite.com/docs/agent/v3/cli-redactor) was added
  # in https://github.com/buildkite/agent/releases/tag/v3.66.0)
  echo "Redacting secret in Buildkite logs"
  if ! echo "${secret_value}" | buildkite-agent redactor add ; then
    echo "Secret could not be redacted in Buildkite logs. Please ensure the Buildkite agent redactor is configured correctly."
  fi

  echo "Exporting secret ${secret_name} from GCP Secret Manager into environment variable ${export_name}"

  export "${export_name}=${secret_value}"
}

function get_secret_value() {
  local secret_name="$1"
  local secret_value

  secret_value=$(gcloud secrets versions access latest \
    --secret="${secret_name}" \
    --format='get(payload.data)' | tr '_-' '/+' | base64 -d)

  result=$?
  if [[ $result -ne 0 ]]; then
    exit 1
  fi

  echo "${secret_value}"
}

function strip_quotes() {
  echo "${1}" | sed "s/^[[:blank:]]*//g;s/[[:blank:]]*$//g;s/[\"']//g"
}

echo "Fetching secrets..."

# Parse env items
while IFS='=' read -r name _ ; do
  if [[ $name =~ ^(BUILDKITE_PLUGIN_GCP_SECRET_MANAGER_ENV_) ]] ; then
    initialize

    export_name="${name//BUILDKITE_PLUGIN_GCP_SECRET_MANAGER_ENV_/}"
    secret_name="$(strip_quotes "${!name}")"

    load_secret_into_env "${export_name}" "${secret_name}"
  fi
done < <(env | sort)
